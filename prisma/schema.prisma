// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma-client"
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_CONNECTION_STRING")
}

model Note {
  id         Int       @id @default(autoincrement())
  content    String    @db.Text
  rawMessage Json      @db.JsonB
  noteDate   DateTime  @default(now())
  createdAt  DateTime  @default(now())
  updatedAt  DateTime? @updatedAt
  chatId     BigInt
  images     Image[]

  @@index([chatId])
  @@index([noteDate])
}

model BotResponse {
  id        Int       @id @default(autoincrement())
  content   String    @db.Text
  noteId    Int
  chatId    BigInt
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt

  @@index([chatId])
  @@index([noteId])
}

model Image {
  id          Int      @id @default(autoincrement())
  url         String
  description String?  @db.Text
  note        Note     @relation(fields: [noteId], references: [id])
  noteId      Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Todo {
  id           Int       @id @default(autoincrement())
  key          String
  content      String    @db.Text
  createdAt    DateTime  @default(now())
  status       String    @default("new")
  completedAt  DateTime?
  priority     String?   @db.VarChar(1)
  dueDate      DateTime?
  snoozedUntil DateTime?
  tags         String[]
  contexts     String[]
  projects     String[]
  chatId       BigInt?

  @@index([key])
  @@index([chatId])
}

model Question {
  id           Int      @id @default(autoincrement())
  chatId       BigInt
  questionText String   @db.Text
  type         String   @default("text") // "text", "number", "binary"
  createdAt    DateTime @default(now())
  Answer       Answer[]

  @@index([chatId])
  @@index([createdAt])
}

model Answer {
  id           Int      @id @default(autoincrement())
  questionId   Int
  textAnswer   String?  @db.Text
  numberAnswer Float?
  answerDate   DateTime @default(now())
  createdAt    DateTime @default(now())
  question     Question @relation(fields: [questionId], references: [id])

  @@index([questionId])
  @@index([answerDate])
  @@index([createdAt])
}

model TaskNote {
  id        Int      @id @default(autoincrement())
  key       String
  content   String   @db.Text
  createdAt DateTime @default(now())
  chatId    BigInt

  @@index([key])
  @@index([chatId])
}
